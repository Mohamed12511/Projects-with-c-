This project simulates a simple banking system with features such as adding clients, deleting clients, updating client information, making transactions (deposit and withdrawal), and checking balances.
The system uses file handling to store client data, and it implements basic functionality such as managing accounts and displaying client details.
This project is intended to demonstrate the use of structures, file I/O operations, enums, and basic logic in C++.
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <iomanip>
using namespace std;

// File where client information is stored
string filenemee = "clientss.txt";

// Structure to hold client information (Account number, pincode, name, phone number, and account balance)
struct Clients {
    string Accountnumber;
    string pincode;
    string name;
    string number;
    int Accountbalance;
    bool markdelete = false;  // Marks whether the client has been deleted
};

// Enum to represent menu options
enum Alloptions {
    showallclient = 1, // Option to show all clients
    Addnewclient = 2,  // Option to add new client
    deletee = 3,       // Option to delete client
    update = 4,        // Option to update client information
    find = 5,          // Option to find a client
    transaction = 6,   // Option to perform transactions
    Exit = 7           // Exit option
};

// Function to read client details from the user
Clients Read() {
    Clients Read;
    cout << "Enter Your AccountNumber " << endl;
    getline(cin >> ws, Read.Accountnumber);  // Getting account number
    cout << "Enter Your Pincode " << endl;
    getline(cin, Read.pincode);  // Getting pincode
    cout << "Enter Your Name " << endl;
    getline(cin, Read.name);  // Getting name
    cout << "Enter Your Number " << endl;
    getline(cin, Read.number);  // Getting phone number
    cout << "Enter Your Account Balance " << endl;
    cin >> Read.Accountbalance;  // Getting account balance
    return Read;
}

// Function to convert client information to a string format
string REadToLine(Clients Line) {
    string s;
    string sperator = "##";
    s += Line.Accountnumber + sperator;
    s += Line.pincode + sperator;
    s += Line.name + sperator;
    s += Line.number + sperator;
    s += to_string(Line.Accountbalance) + sperator;
    return s;
}

// Function to add new client information to the file
void Fileaddnewclient(string line) {
    fstream MyFile;
    MyFile.open(filenemee, ios::out | ios::app);  // Opening the file in append mode
    if (MyFile.is_open()) {
        MyFile << line << endl;  // Write the new client data
    }
    MyFile.close();
}

// Function to process adding new clients by repeatedly asking if the user wants to add more
void processnewclient() {
    char c = 'n';
    cout << "Do you want to add a new client? (y/n)" << endl;
    cin >> c;
    while (c == 'y' || c == 'Y') {
        system("cls");  // Clears the console screen
        Fileaddnewclient(REadToLine(Read()));  // Add new client data to file
        cout << "Do you want to add another client? (y/n)" << endl;
        cin >> c;
    }
}

// Function to split a string into vector based on a separator
vector<string> Tostructer(string line, string sperator = "##") {
    vector<string> vC;
    string sword;
    int pos = 0;
    while ((pos = line.find(sperator)) != string::npos) {
        string sword = line.substr(0, pos);
        if (line != "")
            line.erase(0, pos + sperator.size());
        if (sword != "")
            vC.push_back(sword);  // Push the split string into vector
    }
    if (line != "")
        vC.push_back(line);  // Add the last part of the string
    return vC;
}

// Function to convert a string to a client object
Clients Read2(string line) {
    Clients Read2;
    vector<string> v = Tostructer(line);
    Read2.Accountnumber = v[0];
    Read2.pincode = v[1];
    Read2.name = v[2];
    Read2.number = v[3];
    Read2.Accountbalance = stoi(v[4]);
    return Read2;
}

// Function to retrieve all clients from the file
vector<Clients> allclients() {
    fstream MyFile;
    vector<Clients> v;
    MyFile.open(filenemee, ios::in);  // Open the file in read mode
    string line;
    if (MyFile.is_open()) {
        while (getline(MyFile, line)) {
            if (line != "")
                v.push_back(Read2(line));  // Convert each line to a client object and add to the vector
        }
    }
    MyFile.close();
    return v;
}

// Function to save changes after deleting clients (clients marked for deletion will be ignored)
void savechagesafterdelete(vector<Clients>& v) {
    fstream MyFile;
    MyFile.open(filenemee, ios::out);  // Open the file in write mode
    string line;
    if (MyFile.is_open()) {
        for (Clients& c : v) {
            if (c.markdelete == false) {
                line = REadToLine(c);  // Convert client object back to string format
                MyFile << line << endl;  // Write to file
            }
        }
        MyFile.close();
    }
}

// Function to print the details of all clients
void printclient(vector<Clients> v) {
    cout << "The All Clients in The bank " << endl;
    for (Clients& c : v) {
        cout << "|  " << c.Accountnumber;
        cout << "| " << c.pincode;
        cout << "|  " << c.name;
        cout << "|  " << c.number;
        cout << "|  " << c.Accountbalance;
        cout << endl;
    }
}

// Function to print all clients with proper formatting
void printallclients(vector<Clients> v) {
    cout << "___________________________________________________________" << endl;
    cout << "|" << "AccountNumber    " << " Pin Code     " << "|  " << "ClientName                           " << "|"
         << "  Phone          " << "| " << "Balance" << endl;
    cout << "________________________________________________________________________________________________" << endl;
    printclient(v);  // Call the function to print client details
}

// Additional functions for handling client updates, deletions, finding clients, and performing transactions are similarly commented below.

